import { useAppDispatch } from '@/hooks/useAppDispatch'
import { useAppSelector } from '@/hooks/useAppSelector'
import useNotification from '@/hooks/useNotification'
import { leaderBoardParams } from '@/pages/LeaderBoard/LeaderBoard'
import { getLeaderBoardResults } from '@/store/asyncThunks/leaderboard/getLeaderBoardResults'
import {
  leaderBoardSelector,
  oldLeaderBoardSelector,
} from '@/store/slices/leaderBoardSlice'
import { userSelector } from '@/store/slices/userSlice'
import s from './Main.module.scss'
import Button from '@/components/Button/Button'
import { useNavigate } from 'react-router-dom'
import { AppPath } from '@/types/AppPath'
import { ChangeEventHandler, useEffect, useState } from 'react'
import { setGameCols } from '@/store/slices/gameSlice'
import grid4 from '@/assets/images/other/grid4.svg'
import grid6 from '@/assets/images/other/grid6.svg'
import grid10 from '@/assets/images/other/grid10.svg'
import Logo from '@/components/Logo/Logo'

const Main = () => {
  const navigate = useNavigate()
  const notification = useNotification()
  const dispatch = useAppDispatch()
  const leaderList = useAppSelector(leaderBoardSelector)
  const oldLeaderList = useAppSelector(oldLeaderBoardSelector)
  const currentUser = useAppSelector(userSelector)

  useEffect(() => {
    dispatch(getLeaderBoardResults(leaderBoardParams))
  }, [])

  useEffect(() => {
    if (leaderList !== null && oldLeaderList !== null) {
      const isSame =
        JSON.stringify(oldLeaderList) === JSON.stringify(leaderList)

      if (!isSame) {
        compareArrays(oldLeaderList, leaderList)
      }
    }
  }, [oldLeaderList, leaderList])

  const compareArrays = (
    prevArray: ILeaderBoardData[],
    currentArray: ILeaderBoardData[]
  ) => {
    if (prevArray[0].userData.id !== currentArray[0].userData.id) {
      const message = `–ò–≥—Ä–æ–∫ ${currentArray[0].userData.first_name} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${currentArray[0].codeHuntersMemoryGameScore}`

      notification.notifyUser('–í –∏–≥—Ä–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –ª–∏–¥–µ—Ä', message)
    } else {
      const oldIndex = prevArray.findIndex(
        user => user.userData.id === currentUser.data?.id
      )
      const newIndex = currentArray.findIndex(
        user => user.userData.id === currentUser.data?.id
      )

      if (oldIndex < 3 && newIndex > 2) {
        const message = `–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ‚Äì ${newIndex + 1}`

        notification.notifyUser('–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤ —Ç—Ä–æ–π–∫–µ –ª–∏–¥–µ—Ä–æ–≤', message)
      }
    }
  }

  type GameIcons = {
    easy: string
    hard: string
    veryHard: string
  }

  const gameIcons: GameIcons = {
    easy: grid4,
    hard: grid6,
    veryHard: grid10,
  }

  const [selectedValue, setSelectedValue] = useState<null | string>(null)

  const handleRadioChange: ChangeEventHandler<HTMLInputElement> = event => {
    const selectedValue = event.target.id // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 'easy', 'hard' –∏–ª–∏ 'veryHard'

    setSelectedValue(selectedValue)

    let cols = 4
    if (selectedValue === 'easy') {
      cols = 4
    } else if (selectedValue === 'hard') {
      cols = 6
    } else if (selectedValue === 'veryHard') {
      cols = 10
    }

    // –í—ã–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è gameCols –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Redux
    dispatch(setGameCols(cols))

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Local Storage
    localStorage.setItem('gameCols', cols.toString())
  }

  const handlePlayClick = () => {
    navigate(AppPath.GAME)
  }

  return (
    <div className={s.wrapper}>
      <div className={s.content}>
        <div className={s.contentWrapper}>
          <div className={s.textWrapper}>
            <h1 className={s.mainTitle}>
              <div className={s.titleDiv}>
                {'–ò –ì –† –ê'.split('').map((letter, index) =>
                  letter !== ' ' ? (
                    <Logo logo={false} letter={letter} key={index} />
                  ) : (
                    <div
                      className={letter !== ' ' ? s.titleSpan : s.titleGap}
                      key={index}>
                      {letter}
                    </div>
                  )
                )}
              </div>
              <div className={s.titleDiv}>
                {'M E M O R Y'.split('').map((letter, index) =>
                  letter !== ' ' ? (
                    <Logo logo={false} big={true} letter={letter} key={index} />
                  ) : (
                    <div
                      className={letter !== ' ' ? s.titleSpan : s.titleGap}
                      key={index}>
                      {letter}
                    </div>
                  )
                )}
              </div>
              –ó–∞–ø–æ–º–Ω–∏ —Å–≤–æ–π —Å—Ç–µ–∫
            </h1>
            <h2>–¶–µ–ª—å –∏–≥—Ä—ã:</h2>
            –ó–∞–ø–æ–º–Ω–∏—Ç—å –∏ –Ω–∞–π—Ç–∏ –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
            <br />
            <h2>–•–æ–¥ –∏–≥—Ä—ã:</h2>
            <ul>
              <li>–ò–≥—Ä–æ–∫—É –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É</li>
              <li>–í –ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø–æ–º–Ω–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
              <li>–î–∞–ª—å—à–µ –∏–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥</li>
              <li>–ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤–ø–∞–ª–∏, –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏</li>
              <li>–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è</li>
              <li>–ö–æ–≥–¥–∞ –≤—Å–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è</li>
            </ul>
            {/*{!notification.isGranted && (*/}
            {/*  <div className={s.notification}>*/}
            {/*    <br/><br/>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫*/}
            {/*    <button onClick={() => notification.notifyUser('', '')}>*/}
            {/*      üîî*/}
            {/*    </button>*/}
            {/*  </div>*/}
            {/*)}*/}
          </div>
          <div className={s.levelWrapper}>
            <h2 className={s.pickLevelTitle}>–†–∞–∑–º–µ—Ä –ø–æ–ª—è:</h2>
            <ul className={s.levels}>
              <li className={s.level}>
                <input
                  id="easy"
                  name="levels"
                  type="radio"
                  className={s.radio}
                  onChange={handleRadioChange}
                />
                <label htmlFor="easy" className={s.levelText}>
                  4X4
                </label>
              </li>
              <li className={s.level}>
                <input
                  id="hard"
                  name="levels"
                  type="radio"
                  className={s.radio}
                  onChange={handleRadioChange}
                />
                <label htmlFor="hard" className={s.levelText}>
                  6X6
                </label>
              </li>
              <li className={s.level}>
                <input
                  id="veryHard"
                  name="levels"
                  type="radio"
                  className={s.radio}
                  onChange={handleRadioChange}
                />
                <label htmlFor="veryHard" className={s.levelText}>
                  6X10
                </label>
              </li>
            </ul>
            <Button
              onClick={handlePlayClick}
              className={s.button}
              disabled={!selectedValue}>
              –ò–≥—Ä–∞—Ç—å
            </Button>
            <div className={s.difficultImg}>
              {selectedValue && (
                <img
                  src={gameIcons[selectedValue as keyof GameIcons]}
                  alt={selectedValue}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Main
